
#        Python
# Time complexity - O (n x m)
# Space complexity - O (n)

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        initial.sort()

        def dfs(graph: List[List[int]], node: int, infected: Set[int], visited: List[bool]):
            if visited[node]:
                return
            visited[node] = True
            infected.add(node)

            for i in range(len(graph)):
                if graph[node][i] == 1 and not visited[i]:
                    dfs(graph, i, infected, visited)

        min_infected_nodes = float('inf')
        best_node = initial[0]

        for node in initial:
            current_infected_nodes = set()
            for i in initial:
                if i != node:
                    dfs(graph, i, current_infected_nodes, [False] * n)

            if len(current_infected_nodes) < min_infected_nodes:
                min_infected_nodes = len(current_infected_nodes)
                best_node = node

        return best_node
